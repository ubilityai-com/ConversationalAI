from mcp.server.fastmcp import FastMCP
from typing import Optional
from pydantic import BaseModel, Field
import os, sys

apps = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(apps)

from mcpLibraries import mailChimp

mcp = FastMCP("MailChimpMcpServer")


class CreateMailChimpMemberBodyMarketingPermissions(BaseModel):
    marketing_permission_id: Optional[str] = Field(
        None, description="The unique ID for the marketing permission. This is a UUIDv4 value that is generated by Mailchimp when a marketing permission is created. It can be used to identify a marketing permission across multiple lists."
    )
    enabled: Optional[bool] = Field(
        None, description="If the subscriber has opted-in to the marketing permission. This should be a boolean value, true if the subscriber has opted-in, false if they have not. If not specified, the default is false."
    )


class CreateMailChimpMemberBody(BaseModel):
    email_address: str = Field(
        None, description="the email address of the member to create. This should be a valid email address."
    )
    status: str = Field(
        None, description="Current status of the Subscriber. (subscribed, unsubscribed, cleaned, pending, transactional)."
    )
    email_type: Optional[str] = Field(
        None, description="Type of email this member asked to get (html, text). If not specified, the default is html."
    )
    merge_fields: Optional[dict] = Field(
        None, description="A dictionary of merge field values for the member. The keys are the merge field tags, and the values are the values for those fields. For example: (FNAME: John, LNAME: Doe). This is used to store additional information about the member, such as their first name, last name, etc. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/) for more Information."
    )
    interests: Optional[dict] = Field(
        None, description="A dictionary of interest IDs and their values. The keys are the IDs of the interests, and the values are booleans indicating whether the member is subscribed to that interest. For example: (interest_id_1: True, interest_id_2: False). This is used to subscribe or unsubscribe members from specific interests in a list."
    )
    language: Optional[str] = Field(
        None, description="The language of the member. This should be a valid ISO 639-1 language code, such as (en) for English, (fr) for French, etc. This is used to store the preferred language of the member."
    )
    vip: Optional[bool] = Field(
        None, description="A boolean indicating whether the member is a VIP member. If true, the member will be marked as a VIP member in Mailchimp. Default value is false."
    )
    location: Optional[dict] = Field(
        None, description="dictionary containing the location of the member. This should be a dictionary with keys for (latitude, longitude). The values should be floats for latitude and longitude. This is used to store the geographical location of the member."
    )
    marketing_permissions: Optional[list[CreateMailChimpMemberBodyMarketingPermissions]] = Field(
        None, description="List of Dictionaries containing the marketing permissions for the subscriber."
    )
    ip_signup: Optional[str] = Field(
        None, description="The IP address of the subscriber when they signed up. This should be a valid IPv4 or IPv6 address. This is used to store the IP address of the subscriber when they signed up for the list."
    )
    timestamp_signup: Optional[str] = Field(
        None, description="The timestamp of when the subscriber signed up for the list. This should be in ISO 8601 format, such as 2015-10-21T15:41:36+00:00. This is used to store the date and time when the subscriber signed up for the list."
    )
    ip_opt: Optional[str] = Field(
        None, description="The IP address of the subscriber when they opted-in to the list. This should be a valid IPv4 or IPv6 address. This is used to store the IP address of the subscriber when they opted-in to the list."
    )
    timestamp_opt: Optional[str] = Field(
        None, description="The timestamp of when the subscriber opted-in to the list. This should be in ISO 8601 format, such as 2015-10-21T15:41:36+00:00. This is used to store the date and time when the subscriber opted-in to the list."
    )
    tags: Optional[list] = Field(
        None, description="A list of tags to apply to the member. Each tag should be a string. This is used to categorize or label the member in Mailchimp. For example: [VIP, Newsletter Subscriber]. If not specified, no tags will be applied."
    )


class CreateMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, where you want to add the member."
    )
    skip_merge_validation: Optional[bool] = Field(
        None, description="If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false."
    )
    body: CreateMailChimpMemberBody = Field(
        description="Dictionary containing the data of the member to create"
    )


class GetMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to retrieve information about."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )


class GetMailChimpListMembersInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the members you want to retrieve information about."
    )
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )
    count: Optional[int] = Field(
        None, description="The number of records to return. Default value is 10. Maximum value is 1000."
    )
    offset: Optional[int] = Field(
        None, description="Used for pagination, this is the number of records from a collection to skip. Default value is 0. for more information on pagination, see the [Mailchimp API documentation](https://mailchimp.com/developer/marketing/docs/methods-parameters/pagination)."
    )
    email_type: Optional[str] = Field(
        None, description="The email type. Possible values are: (html, text, mobile, raw, or custom). If you dont specify an email_type, the default is html."
    )
    status: Optional[str] = Field(
        None, description="The status of the subscriber. Possible Values: (subscribed, unsubscribed, cleaned, pending, transactional, archived)"
    )
    since_timestamp_opt: Optional[str] = Field(
        None, description="Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    before_timestamp_opt: Optional[str] = Field(
        None, description="Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    since_last_changed: Optional[str] = Field(
        None, description="Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    before_last_changed: Optional[str] = Field(
        None, description="Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    unique_email_id: Optional[str] = Field(
        None, description="A unique identifier for the email address across all Mailchimp lists. This is a UUIDv4 value that is generated by Mailchimp when a subscriber is added to a list. It can be used to identify a subscriber across multiple lists."
    )
    vip_only: Optional[bool] = Field(
        None, description="A filter to return only the VIP members of the list. Passing true will restrict results to VIP list members, passing false will return all list members. Default value is false."
    )
    interest_category_id: Optional[str] = Field(
        None, description="The unique id for the interest category. This is used to filter the results to only include members who are subscribed to interests in the specified category."
    )
    interest_ids: Optional[list] = Field(
        None, description="Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories."
    )
    interest_match: Optional[str] = Field(
        None, description="Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. (any) will match a member with any of the interest supplied, (all) will only match members with every interest supplied, and (none) will match members without any of the interest supplied. Possible values: (any, all, none)."
    )
    sort_field: Optional[str] = Field(
        None, description="Returns files sorted by the specified field. Possible values: (timestamp_opt, timestamp_signup, last_changed)."
    )
    sort_dir: Optional[str] = Field(
        None, description="Determines the order direction for sorted results. Possible values: (ASC, DESC)"
    )
    since_last_campaign: Optional[bool] = Field(
        None, description="Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter."
    )
    unsubscribed_since: Optional[str] = Field(
        None, description="Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )


class UpdateMailChimpMemberBodyMarketingPermissions(BaseModel):
    marketing_permission_id: Optional[str] = Field(
        None, description="The unique ID for the marketing permission. This is a UUIDv4 value that is generated by Mailchimp when a marketing permission is created. It can be used to identify a marketing permission across multiple lists."
    )
    enabled: Optional[bool] = Field(
        None, description="If the subscriber has opted-in to the marketing permission. This should be a boolean value, true if the subscriber has opted-in, false if they have not. If not specified, the default is false."
    )


class UpdateMailChimpMemberBody(BaseModel):
    email_address: Optional[str] = Field(
        None, description="the email address of the member to create. This should be a valid email address."
    )
    status: Optional[str] = Field(
        None, description="Current status of the subscriber. (subscribed, unsubscribed, cleaned, pending, transactional)."
    )
    email_type: Optional[str] = Field(
        None, description="Type of email this member asked to get (html, text). If not specified, the default is html."
    )
    merge_fields: Optional[dict] = Field(
        None, description="A dictionary of merge field values for the member. The keys are the merge field tags, and the values are the values for those fields. For example: (FNAME: John, LNAME: Doe). This is used to store additional information about the member, such as their first name, last name, etc. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/) for more Information."
    )
    interests: Optional[dict] = Field(
        None, description="A dictionary of interest IDs and their values. The keys are the IDs of the interests, and the values are booleans indicating whether the member is subscribed to that interest. For example: (interest_id_1: True, interest_id_2: False). This is used to subscribe or unsubscribe members from specific interests in a list."
    )
    language: Optional[str] = Field(
        None, description="The language of the member. This should be a valid ISO 639-1 language code, such as (en) for English, (fr) for French, etc. This is used to store the preferred language of the member."
    )
    vip: Optional[bool] = Field(
        None, description="A boolean indicating whether the member is a VIP member. If true, the member will be marked as a VIP member in Mailchimp. Default value is false."
    )
    location: Optional[dict] = Field(
        None, description="dictionary containing the location of the member. This should be a dictionary with keys for (latitude, longitude). The values should be floats for latitude and longitude. This is used to store the geographical location of the member."
    )
    marketing_permissions: Optional[list[UpdateMailChimpMemberBodyMarketingPermissions]] = Field(
        None, description="List of Dictionaries containing the marketing permissions for the subscriber."
    )
    ip_signup: Optional[str] = Field(
        None, description="The IP address of the subscriber when they signed up. This should be a valid IPv4 or IPv6 address. This is used to store the IP address of the subscriber when they signed up for the list."
    )
    timestamp_signup: Optional[str] = Field(
        None, description="The timestamp of when the subscriber signed up for the list. This should be in ISO 8601 format, such as 2015-10-21T15:41:36+00:00. This is used to store the date and time when the subscriber signed up for the list."
    )
    ip_opt: Optional[str] = Field(
        None, description="The IP address of the subscriber when they opted-in to the list. This should be a valid IPv4 or IPv6 address. This is used to store the IP address of the subscriber when they opted-in to the list."
    )
    timestamp_opt: Optional[str] = Field(
        None, description="The timestamp of when the subscriber opted-in to the list. This should be in ISO 8601 format, such as 2015-10-21T15:41:36+00:00. This is used to store the date and time when the subscriber opted-in to the list."
    )
    tags: Optional[list] = Field(
        None, description="A list of tags to apply to the member. Each tag should be a string. This is used to categorize or label the member in Mailchimp. For example: [VIP, Newsletter Subscriber]. If not specified, no tags will be applied."
    )


class UpdateMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to update information about."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    skip_merge_validation: Optional[bool] = Field(
        None, description="If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false."
    )
    body: UpdateMailChimpMemberBody = Field(
        description="Dictionary containing the data of the member to Update"
    )


class ArchieveMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to Archieve."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )


class AddNoteToMailChimpMemberBody(BaseModel):
    note: str = Field(
        None, description="The note to add to the record of the member. This should be a string containing the note text. The note can be up to 1000 characters long."
    )

class AddNoteToMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to add a note to."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    body: AddNoteToMailChimpMemberBody = Field(description="Dictionary containing The note to add to the record of the member.")


class AddEventToMailChimpMemberBody(BaseModel):
    name: str = Field(
        None, description="The name for this type of event (purchased, visited, etc). Must be 2-30 characters in length and can only contain alphanumeric characters, underscores, and dashes. This is used to categorize the event."
    )
    properties: Optional[dict] = Field(
        None, description=" A dictionary of properties for the event. the keys are the property names, and the values are the property values. This is used to store additional information about the event, such as the product purchased, the amount spent, etc. For example: (product_id: 12345, amount: 29.99). The properties dictionary can contain any additional information you want to associate with the event."
    )
    is_syncing: Optional[bool] = Field(
        None, description="When is_syncing is true, automations based on the event will not fire. This defaults to false."
    )
    occurred_at: Optional[str] = Field(
        None, description="The date and time when the event occurred. This should be in ISO 8601 format, such as 2015-10-21T15:41:36+00:00. If not specified, the current date and time will be used. This is used to store the date and time when the event occurred."
    )


class AddEventToMailChimpMemberInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to add a note to."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    body: AddEventToMailChimpMemberBody = Field(description="Dictionary containing the event to add to the record of the member.")


class ListMailChimpMemberEventsInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to list events for."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )
    count: Optional[int] = Field(
        None, description="The number of records to return. Default value is 10. Maximum value is 1000."
    )
    offset: Optional[int] = Field(
        None, description="Used for pagination, this is the number of records from a collection to skip. Default value is 0. for more information on pagination, see the [Mailchimp API documentation](https://mailchimp.com/developer/marketing/docs/methods-parameters/pagination)."
    )


class UpdateMailChimpMemberTagsBodyTags(BaseModel):
    name: str = Field(
        None, description="The name of the tag to add or remove from the member. This should be a string containing the name of the tag."
    )
    status: str = Field(
        None, description="The status of the tag. Possible values are (active) to add the tag or (inactive) to remove it."
    )


class UpdateMailChimpMemberTagsBody(BaseModel):
    tags: list[UpdateMailChimpMemberTagsBodyTags] = Field(None, description="list of dictionaries of tags details")
    is_syncing: Optional[bool] = Field(
        None, description="When is_syncing is true, automations based on the tags in the request will not fire."
    )


class UpdateMailChimpMemberTagsInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to update tags for."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    body: UpdateMailChimpMemberTagsBody = Field(
        description="dictionary containing the tags to add or remove from the member."
    )


class ListMailChimpMemberTagsInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to list Tags for."
    )
    subscriber_hash: str = Field(
        description="The email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion. This endpoint also accepts The MD5 hash of the lowercase version of the email address of the list member. If you use an email address, it must be the full email address, not just the local part (the part before the @ symbol)."
    )
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )
    count: Optional[int] = Field(
        None, description="The number of records to return. Default value is 10. Maximum value is 1000."
    )
    offset: Optional[int] = Field(
        None, description="Used for pagination, this is the number of records from a collection to skip. Default value is 0. for more information on pagination, see the [Mailchimp API documentation](https://mailchimp.com/developer/marketing/docs/methods-parameters/pagination)."
    )


class FindMailChimpListTagsInput(BaseModel):
    list_id: str = Field(
        description="The unique ID for the Mailchimp list, also known as audience, containing the member you want to list Tags for."
    )
    name: Optional[str] = Field(
        None, description="The search query used to filter tags. The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned. if empty, all tags will be returned. This is a case-insensitive search, so it will match any tag that starts with the specified string, regardless of case."
    )


class GetMailChimpListsInput(BaseModel):
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. e.g.: lists.id, lists.name, lists.stats.member_count, etc."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )
    count: Optional[int] = Field(
        None, description="The number of records to return. Default value is 10. Maximum value is 1000."
    )
    offset: Optional[int] = Field(
        None, description="Used for pagination, this is the number of records from a collection to skip. Default value is 0. for more information on pagination, see the [Mailchimp API documentation](https://mailchimp.com/developer/marketing/docs/methods-parameters/pagination)."
    )
    before_date_created: Optional[str] = Field(
        None, description="Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    since_date_created: Optional[str] = Field(
        None, description="Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    before_campaign_last_sent: Optional[str] = Field(
        None, description="Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    since_campaign_last_sent: Optional[str] = Field(
        None, description="Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    email: Optional[str] = Field(
        None, description="Restrict results to lists that include the email address of a specific subscriber. This is a case-insensitive search, so it will match any email address that contains the specified string, regardless of case."
    )
    sort_field: Optional[str] = Field(
        None, description="Returns lists sorted by the specified field. Possible value: (date_created)."
    )
    sort_dir: Optional[str] = Field(
        None, description="Determines the order direction for sorted results. Possible values: (ASC, DESC)"
    )
    has_ecommerce_store: Optional[bool] = Field(
        None, description="Restrict results to lists that contain an active, connected, undeleted ecommerce store. This will return lists that have an ecommerce store connected to them, which can be used to filter results to only include lists that are associated with ecommerce stores."
    )
    include_total_contacts: Optional[bool] = Field(
        None, description="Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state."
    )


class GetMailChimpCampaignInput(BaseModel):
    campaign_id: str = Field(
        description="The unique id for the campaign. This is a UUIDv4 value that is generated by Mailchimp when a campaign is created. It can be used to identify a campaign across multiple lists."
    )
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )


class GetMailChimpCampaignsInput(BaseModel):
    fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation."
    )
    exclude_fields: Optional[list] = Field(
        None, description="A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation."
    )
    count: Optional[int] = Field(
        None, description="The number of records to return. Default value is 10. Maximum value is 1000."
    )
    offset: Optional[int] = Field(
        None, description="Used for pagination, this is the number of records from a collection to skip. Default value is 0. for more information on pagination, see the [Mailchimp API documentation](https://mailchimp.com/developer/marketing/docs/methods-parameters/pagination)."
    )
    before_send_time: Optional[str] = Field(
        None, description="Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    since_send_time: Optional[str] = Field(
        None, description="Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    before_create_time: Optional[str] = Field(
        None, description="Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    since_create_time: Optional[str] = Field(
        None, description="Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00."
    )
    type: Optional[str] = Field(
        None, description="The campaign type. Possible values: (regular, plaintext, absplit, rss, variate)"
    )
    status: Optional[str] = Field(
        None, description="The status of the campaign.(save, sent, sending, schedule, paused)"
    )
    list_id: Optional[str] = Field(
        None, description="The unique id for a list. this value is used to filter campaigns by the list they are associated with. This is a UUIDv4 value that is generated by Mailchimp when a list is created. It can be used to identify a list across multiple campaigns."
    )
    folder_id: Optional[str] = Field(
        None, description="The unique id for a folder. this value is used to filter campaigns by the folder they are associated with. This is a UUIDv4 value that is generated by Mailchimp when a folder is created. It can be used to identify a folder across multiple campaigns."
    )
    member_id: Optional[str] = Field(
        None, description="Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the email address of the list member. This endpoint also accepts an email address or contact_id of a list member. If you use a contact_id, it must be the full contact_id, not just the id portion."
    )
    sort_field: Optional[str] = Field(
        None, description="Returns files sorted by the specified field. Possible values: (create_time, send_time)"
    )
    sort_dir: Optional[str] = Field(
        None, description="Determines the order direction for sorted results. Possible values: (ASC, DESC)"
    )


class SendMailChimpCampaignInput(BaseModel):
    campaign_id: str = Field(
        description="The unique id for the MailChimp Campaign to send."
    )


class ReSendMailChimpCampaignInput(BaseModel):
    campaign_id: str = Field(
        description="The unique id for the MailChimp Campaign to resend."
    )


class ReplicateMailChimpCampaignInput(BaseModel):
    campaign_id: str = Field(
        description="The unique id for the MailChimp Campaign to Replicate."
    )


class DeleteMailChimpCampaignInput(BaseModel):
    campaign_id: str = Field(
        description="The unique id for the MailChimp Campaign to Delete."
    )


@mcp.tool()
async def mailchimp_create_member(params: CreateMailChimpMemberInput) -> dict:
    """
    Add a new member to the MailChimp list.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_create_member(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_get_member(params: GetMailChimpMemberInput) -> dict:
    """
    Get information about a specific list member, whether they are a currently subscribed, unsubscribed, or bounced member in Mailchimp
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_get_member(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_get_list_members(params: GetMailChimpListMembersInput) -> dict:
    """
    Get information about members in a specific Mailchimp list.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_get_list_members(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_update_member(params: UpdateMailChimpMemberInput) -> dict:
    """
    Update information for a specific list member.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_update_member(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_archive_member(params: ArchieveMailChimpMemberInput) -> dict:
    """
    Archive a list member. To permanently delete, use the delete-permanent action.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_archive_member(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_add_note_to_member(params: AddNoteToMailChimpMemberInput) -> dict:
    """
    Add a new note for a specific subscriber.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_add_note_to_member(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_add_member_event(params: AddEventToMailChimpMemberInput) -> dict:
    """
    Add an event for a list member. This can be used to track actions like subscribing, unsubscribing, opening an email, clicking a link, etc.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_add_member_event(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_list_member_events(params: ListMailChimpMemberEventsInput) -> dict:
    """
    Get events for a contact (Member in a Mailchimp list). This includes actions like subscribing, unsubscribing, opening an email, clicking a link, etc.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_list_member_events(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_update_member_tags(params: UpdateMailChimpMemberTagsInput) -> dict:
    """
    Add or remove tags from a list member. If a tag that does not exist is passed in and set as (active), a new tag will be created.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_update_member_tags(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_list_member_tags(params: ListMailChimpMemberTagsInput) -> dict:
    """
    Get the tags on a list member.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_list_member_tags(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_find_tags(params: FindMailChimpListTagsInput) -> dict:
    """
    Search for tags on a list by name. If no name is provided, will return all tags on the list.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_find_tags(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_get_many_lists(params: GetMailChimpListsInput) -> dict:
    """
    Get information about all lists in the account.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_get_many_lists(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_get_campaign(params: GetMailChimpCampaignInput) -> dict:
    """
    Get information about a specific campaign.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_get_campaign(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_get_many_campaigns(params: GetMailChimpCampaignsInput) -> dict:
    """
    Get all MailChimp campaigns in an account.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_get_many_campaigns(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_send_campaign(params: SendMailChimpCampaignInput) -> dict:
    """
    Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_send_campaign(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_resend_campaign(params: ReSendMailChimpCampaignInput) -> dict:
    """
    Creates a Resend to Non-Openers version of this campaign. Mailchimp will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_resend_campaign(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_replicate_campaign(params: ReplicateMailChimpCampaignInput) -> dict:
    """
    Replicate a campaign in saved or send status.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_replicate_campaign(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"

@mcp.tool()
async def mailchimp_delete_campaign(params: DeleteMailChimpCampaignInput) -> dict:
    """
    Remove a campaign from your Mailchimp account.
    """
    try:
        creds = f'{{"apiKey": "{os.environ.get("MAILCHIMP_API_KEY")}", "serverPrefix": "{os.environ.get("MAILCHIMP_SERVER_PREFIX")}"}}'
        params = params.model_dump(exclude_none=True)
        response = mailChimp.mailchimp_delete_campaign(cred=creds, params=params)
        return response
    except Exception as ex:
        return f"An unexpected error occurred: {str(ex)}"


if __name__ == "__main__":
    mcp.run()